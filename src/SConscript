Import( 'env' )

### loudness Analyser ###

# check boost accumulators (header only library)
conf = Configure(env)
if not conf.CheckCXXHeader('boost/accumulators/accumulators.hpp'):
    print 'Error: did not find boost accumulators headers, exiting.'
    Exit(1)
env = conf.Finish()

loudnessAnalyserLib = env.SharedLibrary(
    'loudnessAnalyser',
    Glob( 'loudnessAnalyser/*.cpp' ) +
    Glob( 'loudnessAnalyser/utils/*.cpp' ),
)

loudnessAnalyserLibStatic = env.StaticLibrary(
    'loudnessAnalyser',
    Glob( 'loudnessAnalyser/*.cpp' ) +
    Glob( 'loudnessAnalyser/utils/*.cpp' ),
)

# Install loudnessAnalyser libs
env.Alias( 'install', env.InstallVersionedLib( 'lib', loudnessAnalyserLib ) )
env.Alias( 'install', env.Install( 'lib', loudnessAnalyserLibStatic ) )
# Install loudnessAnalyser headers
env.Alias( 'install', env.Install( 'include/loudnessAnalyser', "loudnessAnalyser/LoudnessAnalyser.hpp" ) )

Export( 'loudnessAnalyserLibStatic' )

### loudness Tools ###

# check libsndfile
conf = Configure(env)
if conf.CheckLibWithHeader('sndfile', 'sndfile.h', 'c'):
    env = conf.Finish()

    loudnessToolsLib = env.SharedLibrary(
        'loudnessTools',
        Glob( 'tool/*/*.cpp' ),
        LIBS = [
            "sndfile",
        ],
    )

    loudnessToolsLibStatic = env.StaticLibrary(
        'loudnessTools',
        Glob( 'tool/*/*.cpp' ),
        LIBS = [
            "sndfile",
        ],
    )

    # Install
    env.Alias( 'install', env.InstallVersionedLib( 'lib', loudnessToolsLib ) )
    env.Alias( 'install', env.Install( 'lib', loudnessToolsLibStatic ) )

    Export( 'loudnessToolsLibStatic' )
else:
    print 'Warning: sndfile library not found, will not build loudnessTools.'
