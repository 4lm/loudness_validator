Import( 'env' )
Import( 'loudnessAssessmentVersionStr' )

### loudness Analyser ###

# check boost accumulators (header only library)
conf = Configure(env)
if not conf.CheckCXXHeader('boost/accumulators/accumulators.hpp'):
    print 'Error: did not find boost accumulators headers, exiting.'
    Exit(1)
env = conf.Finish()

loudnessAnalyserLibName = 'loudnessAnalyser'
# add version number to the name of the shared library if Windows platform
if env['PLATFORM'] == 'win32':
    loudnessAnalyserLibName += '-' + loudnessAssessmentVersionStr

loudnessAnalyserSrc = Glob( '*.cpp' )

loudnessAnalyserLib = env.SharedLibrary(
    target = loudnessAnalyserLibName,
    source = loudnessAnalyserSrc,
)

loudnessAnalyserLibStatic = env.StaticLibrary(
    target = 'loudnessAnalyser',
    source = loudnessAnalyserSrc,
)

# Install loudnessAnalyser libs
env.Alias( 'install', env.InstallVersionedLib( 'lib', loudnessAnalyserLib ) )
env.Alias( 'install', env.Install( 'lib', loudnessAnalyserLibStatic ) )

# Install loudnessAnalyser headers
loudnessAnalyserHeaders = Glob( '*.hpp' )
env.Alias( 'install', env.Install( 'include/loudnessAnalyser', loudnessAnalyserHeaders ) )

Export( 'loudnessAnalyserLibStatic' )
